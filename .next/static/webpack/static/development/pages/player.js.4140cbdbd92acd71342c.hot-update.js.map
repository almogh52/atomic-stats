{"version":3,"file":"static/webpack/static/development/pages/player.js.4140cbdbd92acd71342c.hot-update.js","sources":["webpack:///pages/player.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport fetch from 'node-fetch';\r\n\r\nimport Page from '../components/page.js';\r\nimport '../styles/player.scss';\r\n\r\nimport { Select } from 'rmwc/Select';\r\nimport { Typography } from 'rmwc/Typography';\r\nimport { Card } from 'rmwc/Card';\r\nimport { \r\n  GridList, \r\n  GridTile,   \r\n  GridTilePrimary,\r\n  GridTileSecondary\r\n} from 'rmwc/GridList';\r\nimport {\r\n  Dialog,\r\n  DialogSurface,\r\n  DialogHeader,\r\n  DialogHeaderTitle,\r\n  DialogBody,\r\n  DialogFooter,\r\n  DialogFooterButton,\r\n  DialogBackdrop\r\n} from 'rmwc/Dialog';\r\nimport { Ripple } from 'rmwc/Ripple';\r\n\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\n\r\nconst numberWithCommas = (x) => {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport default class Player extends Component {\r\n  static async getInitialProps({ res, query }) {\r\n    var stats = undefined;\r\n    \r\n    await fetch(`https://atomic-api.herokuapp.com/player/${query.username}`)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        if ('error' in json) {\r\n          //stats = {displayName: \"Unknown\"};\r\n        } else {\r\n          stats = json;\r\n        }\r\n      })\r\n      .catch(ex => {\r\n        //stats = {displayName: \"Unknown\"};\r\n      })\r\n\r\n    return {stats};\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      seasonRange: 'alltime',\r\n      platform: 'pc',\r\n\r\n      chartData: undefined,\r\n      chartType: undefined,\r\n      chartTitle: undefined\r\n    };\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n    this.createDoughnutData = this.createDoughnutData.bind(this);\r\n  }\r\n\r\n  createDoughnutData(key) {\r\n    var data = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        backgroundColor: [\r\n          '#2979ff',\r\n          '#76ff03',\r\n          '#ff9100'\r\n        ]\r\n      }]\r\n    }\r\n    \r\n    var modes = {\r\n      'Solo': this.props.stats.stats[this.state.seasonRange][this.state.platform].solo[key],\r\n      'Duo': this.props.stats.stats[this.state.seasonRange][this.state.platform].duo[key],\r\n      'Squad': this.props.stats.stats[this.state.seasonRange][this.state.platform].squad[key]\r\n    }\r\n\r\n    // Add to the data only the data that isn't 0\r\n    for (var mode in modes)\r\n    {\r\n      if (modes[mode] != 0)\r\n      {\r\n        console.log(data);\r\n        data.labels.push(mode);\r\n        data.datasets[0].data.push(modes[mode]);\r\n      }\r\n    }\r\n\r\n    return (data)\r\n  }\r\n\r\n  createBarData(key) {\r\n    var data = {\r\n      labels: [],\r\n      datasets: [{\r\n        data: [],\r\n        borderColor: '#ffffff',\r\n        borderWidth: 2,\r\n        backgroundColor: [\r\n          '#2979ff',\r\n          '#76ff03',\r\n          '#ff9100'\r\n        ]\r\n      }]\r\n    }\r\n\r\n    var modes = {\r\n      'Solo': this.props.stats.stats[this.state.seasonRange][this.state.platform].solo[key],\r\n      'Duo': this.props.stats.stats[this.state.seasonRange][this.state.platform].duo[key],\r\n      'Squad': this.props.stats.stats[this.state.seasonRange][this.state.platform].squad[key]\r\n    }\r\n\r\n    // Add to the data only the data that isn't 0\r\n    for (var mode in modes)\r\n    {\r\n      if (modes[mode] != 0)\r\n      {\r\n        console.log(data);\r\n        data.labels.push(mode);\r\n        data.datasets[0].data.push(modes[mode]);\r\n      }\r\n    }\r\n\r\n    return (data);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.stats === undefined)\r\n    {\r\n      return (\r\n        <Page>\r\n          <h1>Player not found!</h1>\r\n        </Page>\r\n      )\r\n    }\r\n\r\n    var platformSelect = []\r\n\r\n    // Add only the platforms that the user is playing on\r\n    if (this.props.stats.stats[this.state.seasonRange].pc !== undefined)\r\n      platformSelect.push({\r\n        label: 'PC',\r\n        value: 'pc'\r\n      })\r\n\r\n    if (this.props.stats.stats[this.state.seasonRange].ps4 !== undefined)\r\n      platformSelect.push({\r\n        label: 'PlayStation 4',\r\n        value: 'ps4'\r\n      })\r\n\r\n    if (this.props.stats.stats[this.state.seasonRange].xb1 !== undefined)\r\n      platformSelect.push({\r\n        label: 'Xbox One',\r\n        value: 'xb1'\r\n      })\r\n\r\n    // Get the played platforms\r\n    var platforms = platformSelect.map(function(plat){\r\n      return plat.value;\r\n    });\r\n\r\n    // If the selected platform isn't one of them, change it to one of them to prevent crash\r\n    if (!platforms.includes(this.state.platform))\r\n    {\r\n      this.state.platform = platformSelect[0].value;\r\n    }\r\n\r\n    var statChart;\r\n\r\n    if (this.state.chartType === 'doughnut')\r\n    {\r\n      statChart = <Doughnut data={ this.createDoughnutData(this.state.chartData) } legend={{ labels: { fontColor: \"#ffffff\" } }} options={{ tooltips: { callbacks: { label: function(tooltipItem, data) { var value = data.datasets[0].data[tooltipItem.index]; value = value.toString(); value = value.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); return value; } } } }} />;\r\n    } else if (this.state.chartType === 'bar') {\r\n      statChart = <Bar data={ this.createBarData(this.state.chartData) } legend={{ display: false, fontColor: \"#ffffff\" }} options={{ scales: { xAxes: [{ ticks: { fontColor: \"white\" }, gridLines: { color: \"#424242\" } }], yAxes: [{ ticks: { beginAtZero: true, max: this.state.chartBarMax ? this.state.chartBarMax : 100, fontColor: \"white\" }, gridLines: { color: \"#424242\" } }] } }}/>;\r\n    }\r\n\r\n    var kdChartMax = Math.ceil(Math.max(this.props.stats.stats[this.state.seasonRange][this.state.platform].solo['kd'], this.props.stats.stats[this.state.seasonRange][this.state.platform].duo['kd'], this.props.stats.stats[this.state.seasonRange][this.state.platform].squad['kd']) / 10) * 10\r\n\r\n    var matches;\r\n\r\n    return (\r\n      <Page>\r\n        <br />\r\n\r\n        <Dialog\r\n          open={ this.state.chartData !== undefined }\r\n          onClose={evt => this.setState({ chartData: undefined, chartType: undefined, chartTitle: undefined })}\r\n        >\r\n          <DialogSurface style={{ backgroundColor: \"var(--mdc-theme-secondary)\" }}>\r\n            <DialogHeader>\r\n              <DialogHeaderTitle style={{ color: \"white\" }}>{ this.state.chartTitle }</DialogHeaderTitle>\r\n            </DialogHeader>\r\n            <DialogBody>\r\n              { statChart }             \r\n            </DialogBody>\r\n            <DialogFooter>\r\n                <DialogFooterButton accept>Close</DialogFooterButton>\r\n            </DialogFooter>\r\n          </DialogSurface>\r\n          <DialogBackdrop />\r\n        </Dialog>\r\n\r\n        <div style={{paddingLeft: \"10px\", paddingRight: \"10px\"}}>\r\n          <AtomicCard className=\"atomic-player-stats-card\" title={this.props.stats.displayName} titleSize=\"headline3\" titleColor=\"var(--mdc-theme-primary)\" outlineColor=\"var(--mdc-theme-primary)\" backgroundColor=\"var(--drawer-color)\" width=\"calc(100% - 8px)\" maxWidth=\"970px\">\r\n            <div className=\"atomic-section\">\r\n              <Select className=\"atomic-select atomic-season-range-select\"\r\n                box\r\n                value={this.state.seasonRange}\r\n                onChange={evt => this.setState({seasonRange: evt.target.value})}\r\n                label=\"Season Range\"\r\n                options={[\r\n                  {\r\n                    label: 'All Seasons',\r\n                    value: 'alltime',\r\n                    color: \"black\"\r\n                  },\r\n                  {\r\n                    label: 'Season 5',\r\n                    value: 'weekly',\r\n                    color: \"black\"\r\n                  }\r\n                ]}\r\n              />\r\n\r\n              <Select className=\"atomic-select atomic-platform-select\"\r\n                box\r\n                value={this.state.platform}\r\n                onChange={evt => this.setState({platform: evt.target.value})}\r\n                label=\"Platform\"\r\n                style={{ minWidth: \"140px\" }}\r\n                options={ platformSelect }\r\n              />\r\n            </div>\r\n\r\n            <hr className=\"atomic-divider\" style={{ marginTop: \"68px\", marginBottom: \"10px\" }}/>\r\n\r\n            <div className=\"atomic-section\">\r\n              <GridList tileAspect=\"3x2\" style={{ display: \"flex\" }}>\r\n                <AtomicStatTile onClick={ () => this.setState({ chartData: 'score', chartType: 'doughnut', chartTitle: \"Score\" }) } title=\"Score\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].total.score} />\r\n                <AtomicStatTile onClick={ () => this.setState({ chartData: 'matches', chartType: 'doughnut', chartTitle: \"Matches\" }) } title=\"Matches\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].total.matches} />\r\n                <AtomicStatTile onClick={ () => this.setState({ chartData: 'wins', chartType: 'doughnut', chartTitle: \"Wins\" }) } title=\"Wins\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].total.wins} />\r\n                <AtomicStatTile onClick={ () => this.setState({ chartData: 'kd', chartType: 'bar', chartTitle: \"K/D Ratio\", chartBarMax: kdChartMax }) } title=\"K/D Ratio\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].total.kd} />\r\n                <AtomicStatTile onClick={ () => this.setState({ chartData: 'winrate', chartType: 'bar', chartTitle: \"Win %\", chartBarMax: 100 }) } title=\"Win %\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].total.winrate} />\r\n              </GridList>\r\n              <Typography style={{ paddingLeft: \"15px\", color: \"#9e9e9e\" }} use=\"caption\">Tip: Click on the stat for detailed chart!</Typography>\r\n            </div>\r\n          </AtomicCard>\r\n\r\n          <div className=\"atomic-player-stats\" style={{ paddingTop: \"50px\", display: \"flex\", justifyContent: \"space-evenly\" }}>\r\n            <AtomicCard className=\"atomic-player-solo-card\" title=\"Solo\" subtitle={ numberWithCommas(this.props.stats.stats[this.state.seasonRange][this.state.platform].solo.matches) + \" Matches\"} titleSize=\"headline4\" titleColor=\"#00b0ff\" outlineColor=\"#00b0ff\" backgroundColor=\"var(--drawer-color)\" width=\"350px\" maxWidth=\"970px\">\r\n              <GridList style={{ display: \"flex\" }}>\r\n                <AtomicStatMiniTile className=\"atomic\" title=\"Score\" value={this.props.stats.stats[this.state.seasonRange][this.state.platform].solo.score} />\r\n              </GridList>\r\n            </AtomicCard>\r\n          </div>\r\n        </div>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\n/*class AtomicStatTile2 extends Component {\r\n  render() {\r\n    return (\r\n      \r\n    )\r\n  }\r\n}*/\r\n\r\nclass AtomicStatMiniTile extends Component {\r\n  render() {\r\n    var divider = this.props.borderColor ? (\r\n      <hr className=\"atomic-stat-divider\" style={{ borderColor: this.props.borderColor }} />\r\n    ) : \"\"\r\n\r\n    return (\r\n      <Ripple onClick={ this.props.onClick }>\r\n        <div className={ this.props.className + ' ' + \"atomic-stat-mini-tile\" } style={ {...this.props.style, height: \"40px\", left: \"0px\", display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\"} }>\r\n          <Typography use=\"body1\">{ this.props.title }</Typography>\r\n          <Typography use=\"body2\" style={{ color: \"var(--mdc-theme-primary)\" }}>{ numberWithCommas(this.props.value) }</Typography>\r\n        </div>\r\n      </Ripple>\r\n    )\r\n  }\r\n}\r\n\r\nclass AtomicStatTile extends Component {\r\n  render() {\r\n    return (\r\n      <Ripple onClick={ this.props.onClick }>\r\n        <GridTile style={{ width: \"180px\" }} className={ this.props.className + ' ' + \"atomic-stat-tile\" }>\r\n          <GridTilePrimary style={{ backgroundColor: \"var(--mdc-theme-secondary)\" }}>\r\n            <div style={{ minHeight: \"78px\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\r\n              <Typography use=\"headline4\" style={{ color: \"var(--mdc-theme-primary)\" }}>{ numberWithCommas(this.props.value) }</Typography>\r\n            </div>\r\n          </GridTilePrimary>\r\n          <GridTileSecondary style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", paddingTop: \"17px\", paddingLeft: \"0px\", paddingRight: \"0px\" }}>\r\n            <Typography use=\"headline5\" style={{ color: 'var(--mdc-theme-secondary)' }}>{this.props.title}</Typography>\r\n          </GridTileSecondary>\r\n        </GridTile>\r\n      </Ripple>\r\n    )\r\n  }\r\n}\r\n\r\nclass AtomicCard extends Component {\r\n  render() {\r\n    var polygon = \"polygon(20px 0%, 100% 0, 100% 0, 100% calc(100% - 20px), calc(100% - 20px) 100%, 0 100%, 0 100%, 0% 20px)\";\r\n\r\n    return (\r\n      <div className={ this.props.className + ' ' + \"atomic-card\" } style={ this.props.style }>\r\n        <Card style={{ maxWidth: this.props.maxWidth, width: this.props.width, backgroundColor: this.props.outlineColor, clipPath: polygon, WebkitClipPath: polygon, margin: \"auto\" }} className=\"atomic-outer-card\">\r\n          <Card style={{ maxWidth: this.props.maxWidth, clipPath: polygon, WebkitClipPath: polygon, backgroundColor: this.props.backgroundColor, margin: \"4px 4px\" }} className=\"atomic-inner-card\">\r\n            <div className=\"atomic-card-title\" style={{ display: \"flex\", justifyContent: \"space-between\", paddingTop: \"8px\", display: \"flex\", alignItems: \"center\", paddingLeft: \"20px\", width: \"100%\", height: \"60px\", backgroundColor: \"var(--mdc-theme-secondary)\" }}>\r\n              <Typography use={this.props.titleSize} style={{ color: this.props.titleColor }}>{this.props.title}</Typography>\r\n              <Typography use=\"headline5\" style={{ marginRight: \"35px\", color: \"white\" }}>{this.props.subtitle}</Typography>\r\n            </div>\r\n            <div className=\"atomic-card-content\" style={{ padding: \"10px 10px\" }}>\r\n              {this.props.children}\r\n            </div>\r\n          </Card>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AANA;AACA;AASA;AAbA;AAcA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAYA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAcA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAKA;AAEA;AACA;AAFA;AAKA;AAEA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAXA;AAAA;AAAA;AAAA;AAAA;AAmgPA;;;;;;;;;AAhPA;AACA;AAuPA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAdA;AACA;AAgBA;;;;;;;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAhBA;AACA;AAkBA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAnBA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}