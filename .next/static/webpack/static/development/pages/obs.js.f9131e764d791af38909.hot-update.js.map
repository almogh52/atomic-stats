{"version":3,"file":"static/webpack/static/development/pages/obs.js.f9131e764d791af38909.hot-update.js","sources":["webpack:///pages/obs.js"],"sourcesContent":["import fetch from 'node-fetch';\n\nimport BasePage from '../components/base-page';\nimport { Typography } from 'rmwc';\n\nimport AnimatedNumber from 'react-animated-number';\n\nexport default class ObsOverlay extends BasePage {\n    static async getInitialProps({ query }) {\n      var stats = undefined, displayName = undefined;\n      \n      await fetch(`https://atomic-api.herokuapp.com/player/${query.username}`)\n        .then(response => response.json())\n        .then(json => {\n          if ('error' in json) {\n            //stats = {displayName: \"Unknown\"};\n          } else {\n            displayName = json.displayName;\n            //stats = json.stats.alltime[query.platform].total;\n            stats = {\"score\":563892,\"matches\":2619,\"wins\":156,\"kills\":4626,\"time\":101,\"kd\":\"1.87\",\"winrate\":\"5.92\",\"kpm\":\"1.76\",\"spm\":\"215.39\"}\n          }\n        })\n        .catch(ex => {\n          \n        })\n  \n      return {displayName, username: query.username, platform: query.platform, startStats: {\"score\":563892,\"matches\":2618,\"wins\":155,\"kills\":4618,\"time\":101,\"kd\":\"1.87\",\"winrate\":\"5.92\",\"kpm\":\"1.76\",\"spm\":\"215.39\"}, noLayout: true};\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            matches: 0,\n            wins: 0,\n            kills: 0,\n            newStats: Object.create(this.props.startStats)\n        }\n\n        this.updateStats = this.updateStats.bind(this);\n    }\n\n    componentDidMount() {\n        var intervalId = setInterval(this.updateStats, 5000);\n        // store intervalId in the state so it can be accessed later:\n        this.setState({intervalId: intervalId});\n     }\n     \n     componentWillUnmount() {\n        // use intervalId from the state to clear the interval\n        clearInterval(this.state.intervalId);\n     }\n\n    updateStats() {    \n        fetch(`https://atomic-api.herokuapp.com/player/${this.props.username}`)\n            .then(response => response.json())\n            .then(json => {\n                if ('error' in json) {\n                    //stats = {displayName: \"Unknown\"};\n                } else {\n                    this.setState({newStats: json.stats.alltime[this.props.platform].total})\n                }\n            })\n            .catch(ex => {\n            \n            })\n    }\n\n    div(a, b) {\n        return b == 0 ? a : a / b;\n    }\n\n    render() {\n        console.log(this.props.startStats)\n        console.log(this.state.newStats)\n\n        if (!this.props.startStats)\n        {\n            return (\n                <p>Player not found!</p>\n            )\n        } else {\n            return (\n                <div className=\"atomic-obs-overlay\" style={{ width: \"270px\" }}>\n                    <div className=\"atomic-obs-wins\" style={{ minWidth: \"270px\", display: \"flex\", justifyContent: \"space-evenly\" }}>\n                        <div>\n                            <i className=\"fas fa-trophy\" style={{ color: \"#42a5f5\", position: \"relative\", fontSize: \"30px\", top: \"-3px\", paddingRight: \"20px\" }}></i>\n                            <Typography style={{ color: \"#42a5f5\", fontFamily: \"Burbank\", fontSize: \"40px\" }}>Wins:</Typography>\n                        </div>\n                        <AnimatedNumber component=\"text\" value={this.state.newStats.wins - this.props.startStats.wins}\n                            style={{\n                                paddingRight: \"10px\",\n                                fontFamily: \"Burbank\", fontSize: \"40px\",\n                                color: \"white\"\n                            }}\n                            duration={1000}\n                            component=\"span\"\n                            stepPrecision={0}/>\n                    </div>\n                    <div className=\"atomic-obs-stats\" style={{ paddingTop: \"15px\", minWidth: \"270px\", display: \"flex\", justifyContent: \"space-around\", flexDirection: \"row\" }}>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flexWrap: \"column\" }}>\n                            <Typography style={{ color: \"#d32f2f\", flexDirection: \"row\", fontFamily: \"Burbank\", fontSize: \"25px\" }}>K/D</Typography>\n                            <AnimatedNumber component=\"text\" value={this.div(this.state.newStats.kills - this.props.startStats.kills, (this.state.newStats.matches - this.state.newStats.wins) - (this.props.startStats.matches - this.props.startStats.wins))}\n                                style={{\n                                    paddingTop: \"5px\",\n                                    flexWrap: \"row\",\n                                    fontFamily: \"Burbank\", fontSize: \"34px\",\n                                    color: \"white\"\n                                }}\n                                duration={1000}\n                                component=\"span\"\n                                stepPrecision={2}\n                                formatValue={n => n.toFixed(2)}/>\n                        </div>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flexWrap: \"column\" }}>\n                            <Typography style={{ color: \"#66bb6a\", flexDirection: \"row\", fontFamily: \"Burbank\", fontSize: \"25px\" }}>Win %</Typography>\n                            <AnimatedNumber component=\"text\" value={this.div(this.state.newStats.wins - this.props.startStats.wins, this.state.newStats.matches - this.props.startStats.matches) * 100}\n                                style={{\n                                    paddingTop: \"5px\",\n                                    flexWrap: \"row\",\n                                    fontFamily: \"Burbank\", fontSize: \"34px\",\n                                    color: \"white\"\n                                }}\n                                duration={1000}\n                                component=\"span\"\n                                stepPrecision={2}\n                                formatValue={n => n.toFixed(2) + \"%\"}/>\n                        </div>\n                        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", flexWrap: \"column\" }}>\n                            <Typography style={{ color: \"#ffa726\", flexDirection: \"row\", fontFamily: \"Burbank\", fontSize: \"25px\" }}>Matches</Typography>\n                            <AnimatedNumber component=\"text\" value={this.state.newStats.matches - this.props.startStats.matches}\n                                style={{\n                                    paddingTop: \"5px\",\n                                    flexWrap: \"row\",\n                                    fontFamily: \"Burbank\", fontSize: \"34px\",\n                                    color: \"white\"\n                                }}\n                                duration={1000}\n                                component=\"span\"\n                                stepPrecision={0}/>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAVA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AAPA;AAUA;AAAA;AAVA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AAPA;AAUA;AAAA;AAVA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAJA;AAMA;AAPA;AAAA;AAAA;AAAA;AAcA;AACA;;;;AA1IA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}